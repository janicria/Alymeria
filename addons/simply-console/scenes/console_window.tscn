[gd_scene load_steps=6 format=3 uid="uid://cmrfdlp25wcby"]

[ext_resource type="Script" path="res://addons/simply-console/scripts/command_parser.gd" id="1_oe0g5"]
[ext_resource type="Script" path="res://addons/simply-console/scripts/command_lexer.gd" id="2_mcw8w"]

[sub_resource type="GDScript" id="GDScript_u0mjt"]
resource_name = "console_window"
script/source = "extends Window

const SHOP := preload(\"res://scences/current_views/shop/shop.tscn\")

# Permissions for executing commands.
@export var permissionLevel: ConsoleDataManager.PermissionLevel = 0
@export var cheatsEnabled: bool = false

# Console node references.
@onready var OutputFieldRef: RichTextLabel = %OutputField
@onready var InputFieldRef: LineEdit = %InputField
@onready var CommandParserRef: Node = $CommandParser
@onready var CommandLexerRef: Node = $CommandLexer

# Response limits
const MAX_RESPONSES: int = 256
const MAX_CHAR_COUNT: int = 8192

# Command history limit
const MAX_COMMAND_HISTORY: int = 16

# Command history variables
var commandHistory_: PackedStringArray
var historyPosition: int = 0


func _ready() -> void:
	Events.toggle_console_visible.connect(func()->void:
		visible = !visible; if Data.console_banned: queue_free())
	visibility_changed.connect(func()->void: Data.console_open = visible)
	output_comment(
		\"To see a list of available commands use the 'help' command)\"
	)
	output_comment(
		\"Optionally, use 'help (command)' to get more information about a specific command.\"
	)


func _input(event: InputEvent) -> void:
	if event.is_action_pressed(\"~_pressed\"):
		hide()
	
	elif event is InputEventKey:
		# Move up in command history
		if (
			event.pressed
			and event.keycode == KEY_UP
			and not commandHistory_.is_empty()
		):
			if historyPosition != 0:
				historyPosition -= 1
			InputFieldRef.set_text(commandHistory_[historyPosition])
		
		# Move down in command history
		if (
			event.pressed
			and event.keycode == KEY_DOWN
			and not commandHistory_.is_empty()
		):
			# FIXME: \"Temp\" hotfix
			# Spamming down key at the bottom of the console if historyPosition
			# is < 0 causes an error ONLY in release builds
			if !OS.has_feature(\"release\"): return
			if historyPosition != commandHistory_.size() - 1:
				historyPosition += 1
			InputFieldRef.set_text(commandHistory_[historyPosition])



func on_output_field_updated() -> void:
	# Cap the amount of responses to not bloat memory
	if (
		OutputFieldRef.get_paragraph_count() - 1 > MAX_RESPONSES
		or OutputFieldRef.get_total_character_count() > MAX_CHAR_COUNT
	):
		OutputFieldRef.call_deferred(\"remove_paragraph\", 1)


func on_input_field_text_submitted(text: String) -> void:
	if text == \"\":
		return
	
	InputFieldRef.clear()
	# Escape bbcode tags to avoid possible issues
	text = escape_bbcode(text)
	update_command_history(text)
	
	# Separate the command name and the arguments
	var processedText_: PackedStringArray =\\
		CommandLexerRef.process_input_text(text)
	var command: String = processedText_[0]
	processedText_.remove_at(0)
	
	var response: String =\\
		CommandParserRef.parse_command(
			command,
			processedText_,
			permissionLevel,
			cheatsEnabled
		)
	
	if not response.is_empty():
		output_text(response)


func escape_bbcode(text: String) -> String:
	# Curse you I will have my bbcode
	return text#.replace(\"[\", \"[lb]\")


func update_command_history(text: String) -> void:
	# Remove duplicate command history entry
	if commandHistory_.has(text):
		commandHistory_.remove_at(commandHistory_.find(text))
	
	commandHistory_.append(text)
	historyPosition = commandHistory_.size()
	
	# Cap command history size
	if commandHistory_.size() > MAX_COMMAND_HISTORY:
		commandHistory_.remove_at(0)


#region Print methods
func output_text(text: String, color := Color.WHITE) -> void:
	if color != Color.WHITE: 
		OutputFieldRef.push_color(color)
	
	OutputFieldRef.push_paragraph(HORIZONTAL_ALIGNMENT_LEFT)
	OutputFieldRef.append_text(text)
	OutputFieldRef.pop_all()


func output_warning(text: String) -> void:
	output_text(text, Color.YELLOW)


func output_error(text: String) -> void:
	output_text(text, Color.RED)


func output_comment(text: String) -> void:
	output_text(text, Color.DARK_GRAY)
#endregion


#region Console Commands
func show_command_list(commandName: String = \"\") -> String:
	var response: String = \"List of available commands:\\n\"
	var COMMAND_LIST_: Dictionary = ConsoleDataManager.COMMAND_LIST_
	
	# Show list of commands
	if commandName == \"\":
		for command in COMMAND_LIST_:
			# Only show accessible commands
			if (
				permissionLevel >= COMMAND_LIST_[command][\"minPermission\"]
				and int(cheatsEnabled) >= int(COMMAND_LIST_[command][\"cheats\"])
			):
				response += command + \", \"
		
		return response.trim_suffix(\", \")
	
	# Check permission level requirement
	if permissionLevel < COMMAND_LIST_[commandName][\"minPermission\"]:
		return \"Permission level too low for command '\" + commandName + \"'.\"
	
	# Check cheats requirement
	if cheatsEnabled < COMMAND_LIST_[commandName][\"cheats\"]:
		return \"Cheats are required for command '\" + commandName + \"'.\"
	
	# Show list of arguments for command
	if COMMAND_LIST_.has(commandName):
		if COMMAND_LIST_[commandName][\"argumentList\"].is_empty():
			return \"%s\\nCommand %s does not have any arguments.\" % [COMMAND_LIST_[commandName][\"description\"], commandName]
		
		response = \"%s\\n\" % COMMAND_LIST_[commandName][\"description\"]
		response += \"Argument(s) for '\" + commandName + \"':\\n\"
		for ARGUMENT_ in COMMAND_LIST_[commandName][\"argumentList\"]:
			response += ARGUMENT_[\"name\"]
			if ARGUMENT_[\"optional\"]:
				response += \" (optional)\"
			response += \" \"
	
		return response.trim_suffix(\"\\n\")
	
	return \"Command '\" + commandName + \"' does not exist.\"


func clear_console() -> void:
	OutputFieldRef.clear()


func echo(text: String) -> String:
	return text


func gold(amount: int) -> String:
	Data.gold += amount
	print(\"[CMD] Added %s gold\" % amount)
	return \"Added %s gold\" % amount


func kill(who: String) -> String:
	var player := get_tree().get_first_node_in_group(\"player\") as Player
	var wr: WeakRef = weakref(player); if !wr.get_ref(): 
		print(\"[CMD] Failed to kill %s\" % who)
		return \"Not in a battle!\"
	
	if who != \"self\" && who != \"enemies\" && who != \"summons\":
		return \"%s is not a valid group!\" % who
	
	Data.cheats = true
	
	if who == \"self\":
		player.damage_counter.hide()
		Events.update_battle_state.emit(6)
		player.death_animation()
		hide()
		print(\"[CMD] Killed %s\" % who)
		return \"Killed %s\" % who
	
	for target in get_tree().get_nodes_in_group(who):
		target.death_animation()
	print(\"[CMD] Killed %s\" % who)
	return \"Killed %s\" % who


func heal(amount: int, max_health := false) -> String:
	Data.cheats = true
	if max_health: Data.character.max_health = amount
	Data.character.heal(amount)
	if Data.character.health < 1: kill(\"self\")
	print(\"[CMD] Healed %s health\" % amount)
	return \"Healed %s health\" % amount


func deck(action: String, id: String) -> String:
	const CARDS: Array[Card] = [
		preload(\"res://characters/machine/cards/common/laser.tres\"),
		preload(\"res://characters/machine/cards/common/laser_barrage.tres\"),
		preload(\"res://characters/machine/cards/common/miniature_randomizer.tres\"),
		preload(\"res://characters/machine/cards/common/missile_launcher.tres\"),
		preload(\"res://characters/machine/cards/common/power_strike.tres\"),
		preload(\"res://characters/machine/cards/common/repurposing.tres\"),
		preload(\"res://characters/machine/cards/common/shields.tres\"),
		preload(\"res://characters/machine/cards/rare/advanced_rerouting.tres\"),
		preload(\"res://characters/machine/cards/rare/file_corruption.tres\"),
		preload(\"res://characters/machine/cards/uncommon/gas_stores.tres\"),
		preload(\"res://characters/machine/cards/uncommon/implant_tracking.tres\"),
		preload(\"res://characters/machine/cards/uncommon/power_off.tres\"),
		preload(\"res://characters/machine/cards/uncommon/suboptimal_learning.tres\"),
		preload(\"res://characters/global/cards/purple/singularity.tres\"),
		preload(\"res://characters/global/cards/purple/godroll.tres\"),
		preload(\"res://characters/global/cards/status/infection.tres\"),
		preload(\"res://characters/secret/card_status_test.tres\"),
		preload(\"res://characters/secret/injured_test.tres\"),
		preload(\"res://characters/secret/kevin.tres\"),
		preload(\"res://characters/machine/cards/common/espionage.tres\")
	]
	
	var selected_card: Card
	for card in CARDS:
		if card.name.to_snake_case() == id:
			selected_card = card
	if selected_card == null:
		return \"Card %s does not exist\" % id
	if action != \"has\":
		Data.cheats = true
	
	match action:
		\"add\":
			Data.character.deck.add_card(selected_card)
			print(\"[CMD] Added card %s\" % id)
			return \"Added card %s\" % id
		\"remove\":
			Data.character.deck.remove_card(selected_card)
			print(\"[CMD] Removed card %s\" % id)
			return \"Removed card %s\" % id
		\"has\":
			for card in Data.character.deck.cards:
				if card == selected_card or card == Data.character.deck.cards[-1]:
					return \"You DO%s have card %s in your deck\" % [\"N'T\" if card != selected_card else \"\", id]
	
	return \"%s is not an action for command deck, possible actions: add, remove, has\" % action


# Mainly used to test of gold / card rewards scaling properly with the current biome
func act(number: int = -1) -> String:
	if number == -1: return \"Current act is %s(%s)\" % [Data.Biome.keys()[Data.current_biome], Data.current_biome]
	var old_number := Data.current_biome
	Data.current_biome = number
	Data.cheats = true
	print(\"[CMD] Changed act number from %s to %s\" % [old_number, Data.current_biome])
	return \"Changed act number from %s(%s) to %s(%s)\" % [Data.Biome.keys()[old_number], old_number, Data.Biome.keys()[Data.current_biome], Data.current_biome]


func debug(additional_option: String = \"\") -> String:
	# TODO: Add rust to windows debug
	if additional_option == \"rust\":
		var gob := Goblin.new() # <- Not actually an error
		gob.texture = preload(\"res://assets/misc/icon.svg\")
		get_parent().add_child(gob)
		return \"rust :3\"
	
	# Deck
	print(\"[CMD] Debug w/%s start\" % [(\" %s\" % additional_option) if additional_option != \"\" else \"o any :c\"])
	
	# Note: Running cards.clear() messes up card pile views to show 180-338 cards which is really funny
	Data.character.deck.cards.clear()
	deck(\"add\", \"repurposing\")
	deck(\"add\", \"missile_launcher\")
	deck(\"add\", \"laser\") 
	deck(\"add\", \"shields\")
	deck(\"add\",  \"power_strike\")
	deck(\"add\", \"laser_barrage\")
	deck(\"add\", \"miniature_randomizer\")
	deck(\"add\", \"suboptimal_learning\")
	deck(\"add\",  \"power_off\")
	deck(\"add\", \"gas_stores\")
	deck(\"add\", \"implant_tracking\")
	deck(\"add\", \"advanced_rerouting\")
	deck(\"add\", \"file_corruption\")
	deck(\"add\", \"infection\")
	deck(\"add\", \"godroll\")
	deck(\"add\", \"singularity\")
	deck(\"add\",  \"injured_test\")
	deck(\"add\", \"card_status_test\")
	if additional_option == \"infinite\":
		Data.character.deck.cards.clear()
		deck(\"add\", \"advanced_rerouting\")
		deck(\"add\", \"repurposing\")
		deck(\"add\", \"repurposing\")
		deck(\"add\", \"laser\")
		deck(\"add\", \"shields\")
	
	# Character
	heal(999, true)
	Data.character.max_memory = 99
	if additional_option != \"draw\":
		Data.character.cards_per_turn = 10
	
	# Misc
	if additional_option != \"music\":
		for child:AudioStreamPlayer in MusicPlayer.get_children(): child.volume_db = -INF
	print(\"[CMD] Debug w/%s end!\" % [(\" %s\" % additional_option) if additional_option != \"\" else \"o any :c\"])
	get_parent().settings_bar._on_toggled_button_toggled(true, \"speedy_cards\")
	Data.cheats = true
	return 'Have \"fun\" debugging!'


func turn(number: int) -> String:
	var wr: WeakRef = weakref(get_tree().get_first_node_in_group(\"player\"))
	if !wr.get_ref(): return \"Not in a battle!\"
	elif number < 0: return \"Not a valid turn number!\"
	Events.update_turn_number.emit(number)
	Events.update_battle_state.emit(Battle.State.LOOPS)
	# Battle increases turn number by 1 when battle state is set to 1
	Events.update_turn_number.emit(Data.turn_number - 1)
	Events.update_battle_stats.emit()
	Data.cheats = true
	return \"Changed the turn number from %s to %s\" % [Data.turn_number, Data.turn_number]


func stats() -> String:
	return \"Damage dealt - %s\\nDamage taken - %s\\nHealth healed - %s\\nCheats - %s\" % [Data.damage_dealt, Data.damage_taken, Data.health_healed, Data.cheats]


func cache(amount: int) -> String:
	var wr: WeakRef = weakref(get_tree().get_first_node_in_group(\"player\"))
	if !wr.get_ref(): return \"Not in a battle!\"
	var old_number := Data.character.cache_tokens
	Data.character.cache_tokens = amount
	print(\"[CMD] Changed cache tokens from %s to %s\" % [old_number, Data.character.cache_tokens])
	Data.cheats = true
	return \"Changed cache tokens from %s to %s\" % [old_number, Data.character.cache_tokens]


func battle(id := \"\") -> String:
	# Load the battles into memory
	var battles: Array[BattleStats] = [
		preload(\"res://floors/battles/a1t0_bat2.tres\"),
		preload(\"res://floors/battles/a1t0_sentinel.tres\"),
		preload(\"res://floors/battles/a1t1_spider+bat2.tres\"),
		preload(\"res://floors/battles/a1t1_spider+sentinel.tres\"),
		preload(\"res://floors/battles/a1t2_shaman_sentinel2.tres\"),
		preload(\"res://floors/custom_battles/a1t2_evenodd.tres\"),
		preload(\"res://floors/battles/a1t3_shaman2_sentinel3.tres\")
	]
	
	# List all battles
	var list: String
	if id == \"list\":
		for battle_stats in battles:
			list += battle_stats.resource_path.trim_prefix(
				\"res://floors/%sbattles/\" % (\"custom_\" if \"custom_\" in battle_stats.resource_path else \"\")
				).trim_suffix(\".tres\") + \"\\n\"
		return list
	
	# Find the right battle
	var battle_index: int
	for i in battles:
		if id in i.resource_path:
			break
		elif i == battles[-1]:
			return \"Battle %s does not exist\\nRun 'battle list' to see a list of all battles\" % id
		battle_index += 1
	
	# Load the battle
	var room := Room.new()
	var battle_stats: BattleStats = load(\"res://floors/%sbattles/%s.tres\" % [(\"custom_\" if \"custom_\" in battles[battle_index].resource_path else \"\"), id])
	room.battle_stats = battle_stats
	get_parent()._on_battle_room_entered(room)
	Data.cheats = true
	return \"Changed battle to %s\" % id


func core(action: String, id: String) -> String:
	const CORES: Array[Core] = [
		preload(\"res://characters/global/cores/common/comically_large_anvil.tres\"),
		preload(\"res://characters/global/cores/common/compass.tres\"),
		preload(\"res://characters/global/cores/rare/blindfold.tres\"),
		preload(\"res://characters/global/cores/rare/finale.tres\"),
		preload(\"res://characters/global/cores/rare/maths_textbook.tres\"),
		preload(\"res://characters/global/cores/special/bargaining_chip.tres\"),
		preload(\"res://characters/global/cores/uncommon/infected_horn.tres\"),
		preload(\"res://characters/machine/cores/secure_boot.tres\")
	]
	
	var selected_core: Core
	for core in CORES:
		if core.core_name.to_snake_case() == id:
			selected_core = core
	if selected_core == null:
		return \"Core %s does not exist\" % id
	if action != \"has\": 
		Data.cheats = true
	
	match action:
		\"add\":
			get_parent().core_handler.add_core(selected_core)
			print(\"[CMD] Added core %s\" % id)
			return \"Added core %s\" % id
		\"remove\":
			get_parent().core_handler.remove_core(selected_core)
			print(\"[CMD] Removed core %s\" % id)
			return \"Removed core %s\" % id
	
	return \"%s is not an action for command deck, possible actions: add, remove, has\" % action


func shop() -> String:
	get_parent()._change_view(SHOP)
	Data.cheats = true
	print(\"[CMD] Entered a shop\")
	return \"Entered a shop\"


#endregion
"

[sub_resource type="StyleBoxEmpty" id="StyleBoxEmpty_opm5p"]

[sub_resource type="StyleBoxFlat" id="StyleBoxFlat_6ctxl"]
content_margin_left = 4.0
content_margin_right = 4.0
bg_color = Color(0.133333, 0.133333, 0.133333, 1)
corner_radius_top_left = 4
corner_radius_top_right = 4
corner_radius_bottom_right = 4
corner_radius_bottom_left = 4

[node name="ConsoleWindow" type="Window"]
title = "Console"
initial_position = 2
size = Vector2i(512, 512)
transient = true
script = SubResource("GDScript_u0mjt")

[node name="CommandParser" type="Node" parent="."]
script = ExtResource("1_oe0g5")

[node name="CommandLexer" type="Node" parent="."]
script = ExtResource("2_mcw8w")

[node name="ConsolePanel" type="PanelContainer" parent="."]
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2

[node name="MarginContainer" type="MarginContainer" parent="ConsolePanel"]
layout_mode = 2
theme_override_constants/margin_left = 8
theme_override_constants/margin_top = 8
theme_override_constants/margin_right = 8
theme_override_constants/margin_bottom = 8

[node name="VBoxContainer" type="VBoxContainer" parent="ConsolePanel/MarginContainer"]
layout_mode = 2
theme_override_constants/separation = 8

[node name="OutputField" type="RichTextLabel" parent="ConsolePanel/MarginContainer/VBoxContainer"]
unique_name_in_owner = true
custom_minimum_size = Vector2(0, 150)
layout_mode = 2
size_flags_horizontal = 3
size_flags_vertical = 2
focus_mode = 2
theme_override_styles/focus = SubResource("StyleBoxEmpty_opm5p")
theme_override_styles/normal = SubResource("StyleBoxFlat_6ctxl")
bbcode_enabled = true
scroll_following = true
selection_enabled = true

[node name="InputField" type="LineEdit" parent="ConsolePanel/MarginContainer/VBoxContainer"]
unique_name_in_owner = true
layout_mode = 2
size_flags_vertical = 3
theme_override_font_sizes/font_size = 12
expand_to_text_length = true
caret_blink = true

[connection signal="finished" from="ConsolePanel/MarginContainer/VBoxContainer/OutputField" to="." method="on_output_field_updated"]
[connection signal="text_submitted" from="ConsolePanel/MarginContainer/VBoxContainer/InputField" to="." method="on_input_field_text_submitted"]
