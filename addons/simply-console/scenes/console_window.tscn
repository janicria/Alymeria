[gd_scene load_steps=6 format=3 uid="uid://cmrfdlp25wcby"]

[ext_resource type="Script" path="res://addons/simply-console/scripts/command_parser.gd" id="1_oe0g5"]
[ext_resource type="Script" path="res://addons/simply-console/scripts/command_lexer.gd" id="2_mcw8w"]

[sub_resource type="GDScript" id="GDScript_u0mjt"]
resource_name = "console_window"
script/source = "extends Window

# Permissions for executing commands.
@export var permissionLevel: ConsoleDataManager.PermissionLevel = 0
@export var cheatsEnabled: bool = false

# Console node references.
@onready var OutputFieldRef: RichTextLabel = %OutputField
@onready var InputFieldRef: LineEdit = %InputField
@onready var CommandParserRef: Node = $CommandParser
@onready var CommandLexerRef: Node = $CommandLexer

# Response limits
const MAX_RESPONSES: int = 256
const MAX_CHAR_COUNT: int = 8192

# Command history limit
const MAX_COMMAND_HISTORY: int = 16

# Command history variables
var commandHistory_: PackedStringArray
var historyPosition: int = 0


func _ready() -> void:
	output_comment(
		\"To see a list of available commands use the 'help' command (most are locked behind the cheats command)\"
	)
	output_comment(
		\"Optionally, use 'help (command)' to get more information about a specific command.\"
	)


func on_close_requested() -> void:
	hide()


func _input(event: InputEvent) -> void:
	if event.is_action_pressed(\"~_pressed\"):
		hide()
	
	elif event is InputEventKey:
		# Move up in command history
		if (
			event.pressed
			and event.keycode == KEY_UP
			and not commandHistory_.is_empty()
		):
			if historyPosition != 0:
				historyPosition -= 1
			InputFieldRef.set_text(commandHistory_[historyPosition])
		
		# Move down in command history
		if (
			event.pressed
			and event.keycode == KEY_DOWN
			and not commandHistory_.is_empty()
		):
			if historyPosition != commandHistory_.size() - 1:
				historyPosition += 1
			InputFieldRef.set_text(commandHistory_[historyPosition])


func on_output_field_updated() -> void:
	# Cap the amount of responses to not bloat memory
	if (
		OutputFieldRef.get_paragraph_count() - 1 > MAX_RESPONSES
		or OutputFieldRef.get_total_character_count() > MAX_CHAR_COUNT
	):
		OutputFieldRef.call_deferred(\"remove_paragraph\", 1)


func on_input_field_text_submitted(text: String) -> void:
	if text == \"\":
		return
	
	InputFieldRef.clear()
	# Escape bbcode tags to avoid possible issues
	text = escape_bbcode(text)
	update_command_history(text)
	
	# Separate the command name and the arguments
	var processedText_: PackedStringArray =\\
		CommandLexerRef.process_input_text(text)
	var command: String = processedText_[0]
	processedText_.remove_at(0)
	
	var response: String =\\
		CommandParserRef.parse_command(
			command,
			processedText_,
			permissionLevel,
			cheatsEnabled
		)
	
	if not response.is_empty():
		output_text(response)


func escape_bbcode(text: String) -> String:
	return text.replace(\"[\", \"[lb]\")


func update_command_history(text: String) -> void:
	# Remove duplicate command history entry
	if commandHistory_.has(text):
		commandHistory_.remove_at(commandHistory_.find(text))
	
	commandHistory_.append(text)
	historyPosition = commandHistory_.size()
	
	# Cap command history size
	if commandHistory_.size() > MAX_COMMAND_HISTORY:
		commandHistory_.remove_at(0)


#region Print methods
func output_text(text: String, color := Color.WHITE) -> void:
	if color != Color.WHITE: 
		OutputFieldRef.push_color(color)
	
	OutputFieldRef.push_paragraph(HORIZONTAL_ALIGNMENT_LEFT)
	OutputFieldRef.append_text(text)
	OutputFieldRef.pop_all()


func output_warning(text: String) -> void:
	output_text(text, Color.YELLOW)


func output_error(text: String) -> void:
	output_text(text, Color.RED)


func output_comment(text: String) -> void:
	output_text(text, Color.DARK_GRAY)
#endregion


#region Console Commands
func show_command_list(commandName: String = \"\") -> String:
	var response: String = \"List of available commands:\\n\"
	var COMMAND_LIST_: Dictionary = ConsoleDataManager.COMMAND_LIST_
	
	# Show list of commands
	if commandName == \"\":
		for command in COMMAND_LIST_:
			# Only show accessible commands
			if (
				permissionLevel >= COMMAND_LIST_[command][\"minPermission\"]
				and int(cheatsEnabled) >= int(COMMAND_LIST_[command][\"cheats\"])
			):
				response += command + \", \"
		
		return response.trim_suffix(\", \")
	
	# Check permission level requirement
	if permissionLevel < COMMAND_LIST_[commandName][\"minPermission\"]:
		return \"Permission level too low for command '\" + commandName + \"'.\"
	
	# Check cheats requirement
	if cheatsEnabled < COMMAND_LIST_[commandName][\"cheats\"]:
		return \"Cheats are required for command '\" + commandName + \"'.\"
	
	# Show list of arguments for command
	if COMMAND_LIST_.has(commandName):
		if COMMAND_LIST_[commandName][\"argumentList\"].is_empty():
			return \"%s\\nCommand %s does not have any arguments.\" % [COMMAND_LIST_[commandName][\"description\"], commandName]
		
		response = \"%s\\n\" % COMMAND_LIST_[commandName][\"description\"]
		response += \"Argument(s) for '\" + commandName + \"':\\n\"
		for ARGUMENT_ in COMMAND_LIST_[commandName][\"argumentList\"]:
			response += ARGUMENT_[\"name\"]
			if ARGUMENT_[\"optional\"]:
				response += \" (optional)\"
			response += \" \"
	
		return response.trim_suffix(\"\\n\")
	
	return \"Command '\" + commandName + \"' does not exist.\"


func clear_console() -> void:
	OutputFieldRef.clear()


func toggle_cheats(state: bool = cheatsEnabled) -> String:
	if state == cheatsEnabled:
		return \"Cheats are currently \" + (\"enabled.\" if state else \"disabled.\")
	
	cheatsEnabled = state
	return \"Cheats are now \" + (\"enabled (try running help with cheats on)\" if state else \"disabled.\")


func echo(text: String) -> String:
	return text


func gold(amount: int) -> String:
	GameManager.gold += amount
	return \"Added %s gold\" % amount


func kill(who: String) -> String:
	if who == \"self\" or who == \"player\":
		var player := get_tree().get_first_node_in_group(\"player\") as Player
		# In case the player scene hasn't been instanced yet
		var wr: WeakRef = weakref(player)
		if !wr.get_ref(): return \"Not in a battle!\"
		player.damage_counter.hide()
		Events.player_died.emit()
		player.death_animation()
		hide()
		return \"Killed %s\" % who
	
	for target in get_tree().get_nodes_in_group(who):
		target.death_animation()
	return \"Killed %s\" % who


func heal(amount: int) -> String:
	GameManager.character.heal(amount)
	if GameManager.character.health < 1: kill(\"self\")
	return \"Healed %s health\" % amount


func deck(action: String, rarity: String, id: String = \"\") -> String:
	match action:
		\"add\":
			# Checking if card exists
			var wr: WeakRef = weakref(load(\"res://characters/%s/cards/%s/%s.tres\" % [GameManager.character.id, rarity, id]))
			if !wr.get_ref() or wr.get_ref() is not Card: return \"Card %s with rarity %s does not exist\" % [id, rarity]
			# Adding card to deck
			var card := load(\"res://characters/%s/cards/%s/%s.tres\" % [GameManager.character.id, rarity, id])
			GameManager.character.deck.add_card(card)
			return \"Added card %s with rarity %s\" % [id, rarity]
		\"remove\": # TODO: Add card removal here
			return \"Removing cards is not available in the current version of the game\"
		\"has\":
			var response := \"\"
			for card in GameManager.character.deck.cards:
				# Rarity is 2nd arg
				if card.id == rarity: return \"true\"
			return \"false\"
	
	return \"%s is not an action for command deck, possible actions: add, remove, has\" % action


# Mainly used to test of gold / card rewards scale properly with the current biome
func act(number: int) -> String:
	var old_number := GameManager.current_biome
	GameManager.current_biome = number
	return \"Changed act number from %s(%s) to %s(%s)\" % [GameManager.Biome.keys()[old_number], old_number, GameManager.Biome.keys()[GameManager.current_biome], number]


#endregion
"

[sub_resource type="StyleBoxEmpty" id="StyleBoxEmpty_opm5p"]

[sub_resource type="StyleBoxFlat" id="StyleBoxFlat_6ctxl"]
content_margin_left = 4.0
content_margin_right = 4.0
bg_color = Color(0.133333, 0.133333, 0.133333, 1)
corner_radius_top_left = 4
corner_radius_top_right = 4
corner_radius_bottom_right = 4
corner_radius_bottom_left = 4

[node name="ConsoleWindow" type="Window"]
title = "Console"
initial_position = 2
size = Vector2i(512, 512)
transient = true
script = SubResource("GDScript_u0mjt")

[node name="CommandParser" type="Node" parent="."]
script = ExtResource("1_oe0g5")

[node name="CommandLexer" type="Node" parent="."]
script = ExtResource("2_mcw8w")

[node name="ConsolePanel" type="PanelContainer" parent="."]
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2

[node name="MarginContainer" type="MarginContainer" parent="ConsolePanel"]
layout_mode = 2
theme_override_constants/margin_left = 8
theme_override_constants/margin_top = 8
theme_override_constants/margin_right = 8
theme_override_constants/margin_bottom = 8

[node name="VBoxContainer" type="VBoxContainer" parent="ConsolePanel/MarginContainer"]
layout_mode = 2
theme_override_constants/separation = 8

[node name="OutputField" type="RichTextLabel" parent="ConsolePanel/MarginContainer/VBoxContainer"]
unique_name_in_owner = true
layout_mode = 2
size_flags_horizontal = 3
size_flags_vertical = 3
focus_mode = 2
theme_override_styles/focus = SubResource("StyleBoxEmpty_opm5p")
theme_override_styles/normal = SubResource("StyleBoxFlat_6ctxl")
scroll_following = true
selection_enabled = true

[node name="InputField" type="LineEdit" parent="ConsolePanel/MarginContainer/VBoxContainer"]
unique_name_in_owner = true
layout_mode = 2
caret_blink = true

[connection signal="close_requested" from="." to="." method="on_close_requested"]
[connection signal="finished" from="ConsolePanel/MarginContainer/VBoxContainer/OutputField" to="." method="on_output_field_updated"]
[connection signal="text_submitted" from="ConsolePanel/MarginContainer/VBoxContainer/InputField" to="." method="on_input_field_text_submitted"]
